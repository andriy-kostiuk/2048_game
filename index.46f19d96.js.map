{"mappings":"A,I,E,C,CEEA,OAAM,EACJ,OAAO,SAAW,CAChB,KAAM,OACN,QAAS,UACT,IAAK,MACL,KAAM,MACR,CAAE,AAEF,aAAY,CAAY,CAAE,CACxB,IAAI,CAAC,YAAY,CAAG,GAAgB,CAClC,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CACD,IAAI,CAAC,KAAK,CAAG,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,YAAY,GACxD,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,EAAK,QAAQ,CAAC,IAAI,AAClC,CAEA,OAAQ,CACN,IAAI,CAAC,MAAM,CAAG,EAAK,QAAQ,CAAC,OAAO,CACnC,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,UAAU,EACjB,CAEA,SAAU,CACR,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,EAAK,QAAQ,CAAC,IAAI,CAChC,IAAI,CAAC,KAAK,CAAG,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,YAAY,EAC1D,CAEA,UAAW,CAYT,IAAI,CAAC,IAAI,CAXS,KAChB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAChC,IAAI,EAAO,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,MAAM,CAAC,AAAC,GAAM,AAAM,IAAN,GAEzC,EAAO,IAAI,CAAC,UAAU,CAAC,GACvB,EAAO,IAAI,CAAC,gBAAgB,CAAC,GAE7B,IAAI,CAAC,KAAK,CAAC,EAAI,CAAG,CACpB,CACF,EAGF,CACA,WAAY,CAWV,IAAI,CAAC,IAAI,CAVS,KAChB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAChC,IAAI,EAAO,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,MAAM,CAAC,AAAC,GAAM,AAAM,IAAN,GAEzC,EAAO,IAAI,CAAC,UAAU,CAAC,EAAK,OAAO,IACnC,EAAO,IAAI,CAAC,gBAAgB,CAAC,GAAM,OAAO,GAC1C,IAAI,CAAC,KAAK,CAAC,EAAI,CAAG,CACpB,CACF,EAGF,CACA,QAAS,CAmBP,IAAI,CAAC,IAAI,CAlBS,KAChB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAChC,IAAI,EAAO,EAAE,CAEb,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,EAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EAEhC,EAAO,EAAK,MAAM,CAAC,AAAC,GAAM,AAAM,IAAN,GAE1B,EAAO,IAAI,CAAC,UAAU,CAAC,GACvB,EAAO,IAAI,CAAC,gBAAgB,CAAC,GAE7B,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CAAI,CAAC,EAAI,AAEpC,CACF,EAGF,CACA,UAAW,CAkBT,IAAI,CAAC,IAAI,CAjBS,KAChB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAChC,IAAI,EAAO,EAAE,CAEb,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,EAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EAEhC,EAAO,EAAK,MAAM,CAAC,AAAC,GAAM,AAAM,IAAN,GAC1B,EAAO,IAAI,CAAC,UAAU,CAAC,EAAK,OAAO,IACnC,EAAO,IAAI,CAAC,gBAAgB,CAAC,GAAM,OAAO,GAE1C,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CAAI,CAAC,EAAI,AAEpC,CACF,EAGF,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAEA,WAAW,CAAK,CAAE,CAChB,IAAM,EAAc,EAAE,CAEtB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAC5B,CAAK,CAAC,EAAE,GAAK,CAAK,CAAC,EAAI,EAAE,EAC3B,EAAY,IAAI,CAAC,AAAW,EAAX,CAAK,CAAC,EAAE,EACzB,IAAI,CAAC,KAAK,EAAI,AAAW,EAAX,CAAK,CAAC,EAAE,CACtB,KAEA,EAAY,IAAI,CAAC,CAAK,CAAC,EAAE,EAI7B,OAAO,CACT,CAEA,YAAa,CACX,IAAM,EAAa,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAO,EAAK,KAChD,EAAI,OAAO,CAAC,CAAC,EAAM,KACJ,IAAT,GACF,EAAM,IAAI,CAAC,CACT,IAAK,EACL,IAAK,CACP,EAEJ,GAEO,GACN,EAAE,EAEL,GAAI,AAAsB,IAAtB,EAAW,MAAM,CACnB,OAGF,IAAM,EAAc,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAC1D,CAAE,IAAK,CAAS,CAAE,IAAK,CAAS,CAAE,CAAG,CAAU,CAAC,EAAY,CAC5D,EAAW,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CAE3C,CAAA,IAAI,CAAC,KAAK,CAAC,EAAU,CAAC,EAAU,CAAG,CACrC,CAEA,iBAAiB,CAAK,CAAE,CACtB,IAAM,EAAiB,EAAM,KAAK,GAElC,KAAO,EAAe,MAAM,CAAG,GAC7B,EAAe,IAAI,CAAC,GAGtB,OAAO,CACT,CAEA,cAAe,CACb,IAAI,EAAsB,CAAA,EAE1B,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAChC,IAAM,EAAU,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAEpC,GAAI,AAAY,OAAZ,EAAkB,CACpB,IAAI,CAAC,MAAM,CAAG,EAAK,QAAQ,CAAC,GAAG,CAE/B,MACF,CAEgB,IAAZ,GACF,CAAA,EAAsB,CAAA,CADxB,EAII,EAAM,GAAK,IAAY,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,EACjD,CAAA,EAAsB,CAAA,CADxB,EAII,EAAM,GAAK,IAAY,IAAI,CAAC,KAAK,CAAC,EAAM,EAAE,CAAC,EAAI,EACjD,CAAA,EAAsB,CAAA,CADxB,CAGF,CAGF,IAAI,CAAC,MAAM,CAAG,EACV,EAAK,QAAQ,CAAC,OAAO,CACrB,EAAK,QAAQ,CAAC,IAAI,AACxB,CAEA,KAAK,CAAQ,CAAE,CACb,GAAI,IAAI,CAAC,MAAM,GAAK,EAAK,QAAQ,CAAC,OAAO,CACvC,OAGF,IAAM,EAAY,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAE3C,IAII,IAFiB,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,IAG5C,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,YAAY,GAErB,CACF,CAEA,EAAiB,E,I,E,C,ECpNjB,MAAM,EAAa,aACb,EAAe,SFFf,IAAA,EAAA,AEqEN,CAAA,EAAiB,CACf,YApBF,SAAqB,CAAI,CAAE,CAAS,EAClC,IAAM,EAAQ,EAAK,QAAQ,GAE3B,MAAM,IAAI,CAAC,GAAW,OAAO,CAAC,CAAC,EAAK,KAClC,IAAK,IAAI,EAAW,EAAG,EAnDT,EAmD+B,IAAY,CACvD,IAAM,EAAgB,CAAC,CAAK,CAAC,EAAS,CAAC,EAAS,CAC1C,EAAiB,EAAI,QAAQ,CAAC,EAAS,AAE7C,CAAA,EAAe,WAAW,CAAG,GAAiB,GAC9C,EAAe,SAAS,CAAG,GAC3B,EAAe,SAAS,CAAC,GAAG,CAAC,GAEzB,GACF,EAAe,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,EAAW,EAAE,EAAE,EAAc,CAAC,CAElE,CACF,EACF,EAIE,YAlEF,SAAqB,CAAI,CAAE,CAAS,CAAE,CAAQ,EAC5C,IAAM,EAAe,EAAK,QAAQ,GAC5B,EAAY,OAAO,EAAU,WAAW,EACxC,EAAW,OAAO,EAAS,WAAW,EAI5C,GAFA,EAAU,WAAW,CAAG,EAEpB,EAAe,EAAW,CAC5B,IAAM,EAAa,EAAe,EAElC,EAAU,KAAK,CAAC,WAAW,CAAC,sBAAuB,CAAC,EAAE,EAAE,EAAW,CAAC,CAAC,EACrE,EAAU,SAAS,CAAC,MAAM,CAAC,uBACtB,EAAU,WAAW,CAC1B,EAAU,SAAS,CAAC,GAAG,CAAC,sBAC1B,CAEI,EAAe,IACjB,EAAS,WAAW,CAAG,EACvB,aAAa,OAAO,CAAC,OAAQ,GAEjC,EA+CE,aA7CF,SAAsB,CAAI,CAAE,CAAQ,EAClC,GAAM,CAAC,EAAa,EAAY,EAAa,CAAG,EAC1C,EAAa,EAAK,SAAS,GAMjC,OAJA,MAAM,IAAI,CAAC,GAAU,OAAO,CAAC,AAAC,IAC5B,EAAQ,SAAS,CAAC,GAAG,CAAC,EACxB,GAEQ,GACN,KAAK,EAAA,QAAA,CAAc,IAAI,CACrB,EAAa,SAAS,CAAC,MAAM,CAAC,GAC9B,KACF,MAAK,EAAA,QAAA,CAAc,GAAG,CACpB,EAAW,SAAS,CAAC,MAAM,CAAC,GAC5B,KACF,MAAK,EAAA,QAAA,CAAc,IAAI,CACrB,EAAY,SAAS,CAAC,MAAM,CAAC,EAIjC,CACF,CAyBA,CAAA,EFzEM,WAAA,CAAA,EAAA,EAAA,WAAA,CAAA,EAAA,EAAA,YAAA,CAEN,MAAM,EAAO,IAAI,EAEX,EAAW,SAAS,aAAa,CAAC,UAClC,EAAY,SAAS,gBAAgB,CAAC,cACtC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAW,SAAS,aAAa,CAAC,cAClC,EAAW,SAAS,aAAa,CAAC,sBAAsB,QAAQ,CAEhE,EAAY,aAAa,OAAO,CAAC,QAMvC,SAAS,IACP,EAAY,EAAM,GAClB,EAAY,EAAM,EAAW,GAC7B,EAAa,EAAM,EACrB,CARI,GACF,CAAA,EAAS,WAAW,CAAG,CADzB,EAUA,SAAS,gBAAgB,CAAC,UAAW,AAAC,IACpC,GAAI,EAAK,SAAS,KAAO,EAAK,QAAQ,CAAC,OAAO,EAI9C,OAAQ,EAAI,GAAG,EACb,IAAK,UACH,EAAK,MAAM,GACX,KACF,KAAK,YACH,EAAK,QAAQ,GACb,KACF,KAAK,YACH,EAAK,QAAQ,GACb,KACF,KAAK,aACH,EAAK,SAAS,GACd,KACF,SACE,MACJ,CAEA,IACF,GAEA,EAAS,gBAAgB,CAAC,QAAS,KAC7B,EAAS,SAAS,CAAC,QAAQ,CAAC,UAC9B,EAAK,KAAK,GAEV,EAAS,SAAS,CAAC,OAAO,CAAC,QAAS,WACpC,EAAS,WAAW,CAAG,WACd,EAAS,SAAS,CAAC,QAAQ,CAAC,aACrC,EAAK,OAAO,GAEZ,EAAS,SAAS,CAAC,OAAO,CAAC,UAAW,SACtC,EAAS,WAAW,CAAG,SAEzB,GACF","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","src/scripts/domUtils.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static Statuses = {\n        IDLE: \"idle\",\n        PLAYING: \"playing\",\n        WIN: \"win\",\n        LOSE: \"lose\"\n    };\n    constructor(initialState){\n        this.initialState = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.board = JSON.parse(JSON.stringify(this.initialState));\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.Statuses.IDLE;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.Statuses.PLAYING;\n        this.addNewTile();\n        this.addNewTile();\n    }\n    restart() {\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.Statuses.IDLE;\n        this.board = JSON.parse(JSON.stringify(this.initialState));\n    }\n    moveLeft() {\n        const moveLogic = ()=>{\n            for(let row = 0; row < 4; row++){\n                let temp = this.board[row].filter((n)=>n !== 0);\n                temp = this.mergeTiles(temp);\n                temp = this.addTrailingZeros(temp);\n                this.board[row] = temp;\n            }\n        };\n        this.move(moveLogic);\n    }\n    moveRight() {\n        const moveLogic = ()=>{\n            for(let row = 0; row < 4; row++){\n                let temp = this.board[row].filter((n)=>n !== 0);\n                temp = this.mergeTiles(temp.reverse());\n                temp = this.addTrailingZeros(temp).reverse();\n                this.board[row] = temp;\n            }\n        };\n        this.move(moveLogic);\n    }\n    moveUp() {\n        const moveLogic = ()=>{\n            for(let col = 0; col < 4; col++){\n                let temp = [];\n                for(let row = 0; row < 4; row++)temp.push(this.board[row][col]);\n                temp = temp.filter((n)=>n !== 0);\n                temp = this.mergeTiles(temp);\n                temp = this.addTrailingZeros(temp);\n                for(let row = 0; row < 4; row++)this.board[row][col] = temp[row];\n            }\n        };\n        this.move(moveLogic);\n    }\n    moveDown() {\n        const moveLogic = ()=>{\n            for(let col = 0; col < 4; col++){\n                let temp = [];\n                for(let row = 0; row < 4; row++)temp.push(this.board[row][col]);\n                temp = temp.filter((n)=>n !== 0);\n                temp = this.mergeTiles(temp.reverse());\n                temp = this.addTrailingZeros(temp).reverse();\n                for(let row = 0; row < 4; row++)this.board[row][col] = temp[row];\n            }\n        };\n        this.move(moveLogic);\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    mergeTiles(cells) {\n        const mergedCells = [];\n        for(let i = 0; i < cells.length; i++)if (cells[i] === cells[i + 1]) {\n            mergedCells.push(cells[i] * 2);\n            this.score += cells[i] * 2;\n            i++;\n        } else mergedCells.push(cells[i]);\n        return mergedCells;\n    }\n    addNewTile() {\n        const emptyCells = this.board.reduce((cells, row, rowIndex)=>{\n            row.forEach((cell, colIndex)=>{\n                if (cell === 0) cells.push({\n                    row: rowIndex,\n                    col: colIndex\n                });\n            });\n            return cells;\n        }, []);\n        if (emptyCells.length === 0) return;\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        const { row: chosenRow, col: chosenCol } = emptyCells[randomIndex];\n        const newValue = Math.random() < 0.1 ? 4 : 2;\n        this.board[chosenRow][chosenCol] = newValue;\n    }\n    addTrailingZeros(cells) {\n        const normalizeCells = cells.slice();\n        while(normalizeCells.length < 4)normalizeCells.push(0);\n        return normalizeCells;\n    }\n    updateStatus() {\n        let possibilityNextMove = false;\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const current = this.board[row][col];\n            if (current === 2048) {\n                this.status = $a5fd07fa01589658$var$Game.Statuses.WIN;\n                return;\n            }\n            if (current === 0) possibilityNextMove = true;\n            if (col < 3 && current === this.board[row][col + 1]) possibilityNextMove = true;\n            if (row < 3 && current === this.board[row + 1][col]) possibilityNextMove = true;\n        }\n        this.status = possibilityNextMove ? $a5fd07fa01589658$var$Game.Statuses.PLAYING : $a5fd07fa01589658$var$Game.Statuses.LOSE;\n    }\n    move(moveFunc) {\n        if (this.status !== $a5fd07fa01589658$var$Game.Statuses.PLAYING) return;\n        const prevState = JSON.stringify(this.board);\n        moveFunc();\n        const currentState = JSON.stringify(this.board);\n        if (prevState !== currentState) {\n            this.addNewTile();\n            this.updateStatus();\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nvar $8ebe7b16b3345cce$exports = {};\n\"use strict\";\n\nconst $8ebe7b16b3345cce$var$CELL_CLASS = \"field-cell\";\nconst $8ebe7b16b3345cce$var$HIDDEN_CLASS = \"hidden\";\nconst $8ebe7b16b3345cce$var$GRID_SIZE = 4;\nfunction $8ebe7b16b3345cce$var$updateScore(game, gameScore, gameBest) {\n    const currentScore = game.getScore();\n    const pageScore = Number(gameScore.textContent);\n    const pageBest = Number(gameBest.textContent);\n    gameScore.textContent = currentScore;\n    if (currentScore > pageScore) {\n        const difference = currentScore - pageScore;\n        gameScore.style.setProperty(\"--score-diffeerence\", `\"+${difference}\"`);\n        gameScore.classList.remove(\"game-score--animate\");\n        gameScore.offsetWidth;\n        gameScore.classList.add(\"game-score--animate\");\n    }\n    if (currentScore > pageBest) {\n        gameBest.textContent = currentScore;\n        localStorage.setItem(\"best\", currentScore);\n    }\n}\nfunction $8ebe7b16b3345cce$var$updateStatus(game, messages) {\n    const [messageLose, messageWin, messageStart] = messages;\n    const gameStatus = game.getStatus();\n    Array.from(messages).forEach((message)=>{\n        message.classList.add($8ebe7b16b3345cce$var$HIDDEN_CLASS);\n    });\n    switch(gameStatus){\n        case $a5fd07fa01589658$exports.Statuses.IDLE:\n            messageStart.classList.remove($8ebe7b16b3345cce$var$HIDDEN_CLASS);\n            break;\n        case $a5fd07fa01589658$exports.Statuses.WIN:\n            messageWin.classList.remove($8ebe7b16b3345cce$var$HIDDEN_CLASS);\n            break;\n        case $a5fd07fa01589658$exports.Statuses.LOSE:\n            messageLose.classList.remove($8ebe7b16b3345cce$var$HIDDEN_CLASS);\n            break;\n        default:\n            break;\n    }\n}\nfunction $8ebe7b16b3345cce$var$updateCells(game, fieldRows) {\n    const state = game.getState();\n    Array.from(fieldRows).forEach((row, rowIndex)=>{\n        for(let colIndex = 0; colIndex < $8ebe7b16b3345cce$var$GRID_SIZE; colIndex++){\n            const currentNumber = +state[rowIndex][colIndex];\n            const currentElement = row.children[colIndex];\n            currentElement.textContent = currentNumber || \"\";\n            currentElement.classList = \"\";\n            currentElement.classList.add($8ebe7b16b3345cce$var$CELL_CLASS);\n            if (currentNumber) currentElement.classList.add(`${$8ebe7b16b3345cce$var$CELL_CLASS}--${currentNumber}`);\n        }\n    });\n}\n$8ebe7b16b3345cce$exports = {\n    updateCells: $8ebe7b16b3345cce$var$updateCells,\n    updateScore: $8ebe7b16b3345cce$var$updateScore,\n    updateStatus: $8ebe7b16b3345cce$var$updateStatus\n};\n\n\nvar $09e991522ca7e64e$require$updateCells = $8ebe7b16b3345cce$exports.updateCells;\nvar $09e991522ca7e64e$require$updateScore = $8ebe7b16b3345cce$exports.updateScore;\nvar $09e991522ca7e64e$require$updateStatus = $8ebe7b16b3345cce$exports.updateStatus;\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$fieldRows = document.querySelectorAll(\".field-row\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$gameBest = document.querySelector(\".game-best\");\nconst $09e991522ca7e64e$var$messages = document.querySelector(\".message-container\").children;\nconst $09e991522ca7e64e$var$bestScore = localStorage.getItem(\"best\");\nif ($09e991522ca7e64e$var$bestScore) $09e991522ca7e64e$var$gameBest.textContent = $09e991522ca7e64e$var$bestScore;\nfunction $09e991522ca7e64e$var$updateAll() {\n    $09e991522ca7e64e$require$updateCells($09e991522ca7e64e$var$game, $09e991522ca7e64e$var$fieldRows);\n    $09e991522ca7e64e$require$updateScore($09e991522ca7e64e$var$game, $09e991522ca7e64e$var$gameScore, $09e991522ca7e64e$var$gameBest);\n    $09e991522ca7e64e$require$updateStatus($09e991522ca7e64e$var$game, $09e991522ca7e64e$var$messages);\n}\ndocument.addEventListener(\"keydown\", (evt)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== $a5fd07fa01589658$exports.Statuses.PLAYING) return;\n    switch(evt.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$updateAll();\n});\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startBtn.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startBtn.classList.replace(\"start\", \"restart\");\n        $09e991522ca7e64e$var$startBtn.textContent = \"Restart\";\n    } else if ($09e991522ca7e64e$var$startBtn.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$startBtn.classList.replace(\"restart\", \"start\");\n        $09e991522ca7e64e$var$startBtn.textContent = \"Start\";\n    }\n    $09e991522ca7e64e$var$updateAll();\n});\n\n\n//# sourceMappingURL=index.46f19d96.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst { updateCells, updateScore, updateStatus } = require('./domUtils.js');\n\nconst game = new Game();\n\nconst startBtn = document.querySelector('.start');\nconst fieldRows = document.querySelectorAll('.field-row');\nconst gameScore = document.querySelector('.game-score');\nconst gameBest = document.querySelector('.game-best');\nconst messages = document.querySelector('.message-container').children;\n\nconst bestScore = localStorage.getItem('best');\n\nif (bestScore) {\n  gameBest.textContent = bestScore;\n}\n\nfunction updateAll() {\n  updateCells(game, fieldRows);\n  updateScore(game, gameScore, gameBest);\n  updateStatus(game, messages);\n}\n\ndocument.addEventListener('keydown', (evt) => {\n  if (game.getStatus() !== Game.Statuses.PLAYING) {\n    return;\n  }\n\n  switch (evt.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    default:\n      return;\n  }\n\n  updateAll();\n});\n\nstartBtn.addEventListener('click', () => {\n  if (startBtn.classList.contains('start')) {\n    game.start();\n\n    startBtn.classList.replace('start', 'restart');\n    startBtn.textContent = 'Restart';\n  } else if (startBtn.classList.contains('restart')) {\n    game.restart();\n\n    startBtn.classList.replace('restart', 'start');\n    startBtn.textContent = 'Start';\n  }\n  updateAll();\n});\n","'use strict';\n\nclass Game {\n  static Statuses = {\n    IDLE: 'idle',\n    PLAYING: 'playing',\n    WIN: 'win',\n    LOSE: 'lose',\n  };\n\n  constructor(initialState) {\n    this.initialState = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.board = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = Game.Statuses.IDLE;\n  }\n\n  start() {\n    this.status = Game.Statuses.PLAYING;\n    this.addNewTile();\n    this.addNewTile();\n  }\n\n  restart() {\n    this.score = 0;\n    this.status = Game.Statuses.IDLE;\n    this.board = JSON.parse(JSON.stringify(this.initialState));\n  }\n\n  moveLeft() {\n    const moveLogic = () => {\n      for (let row = 0; row < 4; row++) {\n        let temp = this.board[row].filter((n) => n !== 0);\n\n        temp = this.mergeTiles(temp);\n        temp = this.addTrailingZeros(temp);\n\n        this.board[row] = temp;\n      }\n    };\n\n    this.move(moveLogic);\n  }\n  moveRight() {\n    const moveLogic = () => {\n      for (let row = 0; row < 4; row++) {\n        let temp = this.board[row].filter((n) => n !== 0);\n\n        temp = this.mergeTiles(temp.reverse());\n        temp = this.addTrailingZeros(temp).reverse();\n        this.board[row] = temp;\n      }\n    };\n\n    this.move(moveLogic);\n  }\n  moveUp() {\n    const moveLogic = () => {\n      for (let col = 0; col < 4; col++) {\n        let temp = [];\n\n        for (let row = 0; row < 4; row++) {\n          temp.push(this.board[row][col]);\n        }\n        temp = temp.filter((n) => n !== 0);\n\n        temp = this.mergeTiles(temp);\n        temp = this.addTrailingZeros(temp);\n\n        for (let row = 0; row < 4; row++) {\n          this.board[row][col] = temp[row];\n        }\n      }\n    };\n\n    this.move(moveLogic);\n  }\n  moveDown() {\n    const moveLogic = () => {\n      for (let col = 0; col < 4; col++) {\n        let temp = [];\n\n        for (let row = 0; row < 4; row++) {\n          temp.push(this.board[row][col]);\n        }\n        temp = temp.filter((n) => n !== 0);\n        temp = this.mergeTiles(temp.reverse());\n        temp = this.addTrailingZeros(temp).reverse();\n\n        for (let row = 0; row < 4; row++) {\n          this.board[row][col] = temp[row];\n        }\n      }\n    };\n\n    this.move(moveLogic);\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  mergeTiles(cells) {\n    const mergedCells = [];\n\n    for (let i = 0; i < cells.length; i++) {\n      if (cells[i] === cells[i + 1]) {\n        mergedCells.push(cells[i] * 2);\n        this.score += cells[i] * 2;\n        i++;\n      } else {\n        mergedCells.push(cells[i]);\n      }\n    }\n\n    return mergedCells;\n  }\n\n  addNewTile() {\n    const emptyCells = this.board.reduce((cells, row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          cells.push({\n            row: rowIndex,\n            col: colIndex,\n          });\n        }\n      });\n\n      return cells;\n    }, []);\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const { row: chosenRow, col: chosenCol } = emptyCells[randomIndex];\n    const newValue = Math.random() < 0.1 ? 4 : 2;\n\n    this.board[chosenRow][chosenCol] = newValue;\n  }\n\n  addTrailingZeros(cells) {\n    const normalizeCells = cells.slice();\n\n    while (normalizeCells.length < 4) {\n      normalizeCells.push(0);\n    }\n\n    return normalizeCells;\n  }\n\n  updateStatus() {\n    let possibilityNextMove = false;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = this.board[row][col];\n\n        if (current === 2048) {\n          this.status = Game.Statuses.WIN;\n\n          return;\n        }\n\n        if (current === 0) {\n          possibilityNextMove = true;\n        }\n\n        if (col < 3 && current === this.board[row][col + 1]) {\n          possibilityNextMove = true;\n        }\n\n        if (row < 3 && current === this.board[row + 1][col]) {\n          possibilityNextMove = true;\n        }\n      }\n    }\n\n    this.status = possibilityNextMove\n      ? Game.Statuses.PLAYING\n      : Game.Statuses.LOSE;\n  }\n\n  move(moveFunc) {\n    if (this.status !== Game.Statuses.PLAYING) {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.board);\n\n    moveFunc();\n\n    const currentState = JSON.stringify(this.board);\n\n    if (prevState !== currentState) {\n      this.addNewTile();\n      this.updateStatus();\n    }\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n\nconst Game = require('../modules/Game.class.js');\n\nconst CELL_CLASS = 'field-cell';\nconst HIDDEN_CLASS = 'hidden';\nconst GRID_SIZE = 4;\n\nfunction updateScore(game, gameScore, gameBest) {\n  const currentScore = game.getScore();\n  const pageScore = Number(gameScore.textContent);\n  const pageBest = Number(gameBest.textContent);\n\n  gameScore.textContent = currentScore;\n\n  if (currentScore > pageScore) {\n    const difference = currentScore - pageScore;\n\n    gameScore.style.setProperty('--score-diffeerence', `\"+${difference}\"`);\n    gameScore.classList.remove('game-score--animate');\n    void gameScore.offsetWidth;\n    gameScore.classList.add('game-score--animate');\n  }\n\n  if (currentScore > pageBest) {\n    gameBest.textContent = currentScore;\n    localStorage.setItem('best', currentScore);\n  }\n}\n\nfunction updateStatus(game, messages) {\n  const [messageLose, messageWin, messageStart] = messages;\n  const gameStatus = game.getStatus();\n\n  Array.from(messages).forEach((message) => {\n    message.classList.add(HIDDEN_CLASS);\n  });\n\n  switch (gameStatus) {\n    case Game.Statuses.IDLE:\n      messageStart.classList.remove(HIDDEN_CLASS);\n      break;\n    case Game.Statuses.WIN:\n      messageWin.classList.remove(HIDDEN_CLASS);\n      break;\n    case Game.Statuses.LOSE:\n      messageLose.classList.remove(HIDDEN_CLASS);\n      break;\n    default:\n      break;\n  }\n}\n\nfunction updateCells(game, fieldRows) {\n  const state = game.getState();\n\n  Array.from(fieldRows).forEach((row, rowIndex) => {\n    for (let colIndex = 0; colIndex < GRID_SIZE; colIndex++) {\n      const currentNumber = +state[rowIndex][colIndex];\n      const currentElement = row.children[colIndex];\n\n      currentElement.textContent = currentNumber || '';\n      currentElement.classList = '';\n      currentElement.classList.add(CELL_CLASS);\n\n      if (currentNumber) {\n        currentElement.classList.add(`${CELL_CLASS}--${currentNumber}`);\n      }\n    }\n  });\n}\n\nmodule.exports = {\n  updateCells,\n  updateScore,\n  updateStatus,\n};\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","Statuses","IDLE","PLAYING","WIN","LOSE","constructor","initialState","board","JSON","parse","stringify","score","status","start","addNewTile","restart","moveLeft","move","row","temp","filter","n","mergeTiles","addTrailingZeros","moveRight","reverse","moveUp","col","push","moveDown","getScore","getState","getStatus","cells","mergedCells","i","length","emptyCells","reduce","rowIndex","forEach","cell","colIndex","randomIndex","Math","floor","random","chosenRow","chosenCol","newValue","normalizeCells","slice","updateStatus","possibilityNextMove","current","moveFunc","prevState","$8ebe7b16b3345cce$exports","$8ebe7b16b3345cce$var$CELL_CLASS","$8ebe7b16b3345cce$var$HIDDEN_CLASS","$09e991522ca7e64e$require$updateCells","updateCells","game","fieldRows","state","Array","from","currentNumber","currentElement","children","textContent","classList","add","updateScore","gameScore","gameBest","currentScore","pageScore","Number","pageBest","difference","style","setProperty","remove","offsetWidth","localStorage","setItem","messages","messageLose","messageWin","messageStart","gameStatus","message","$09e991522ca7e64e$require$updateScore","$09e991522ca7e64e$require$updateStatus","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startBtn","document","querySelector","$09e991522ca7e64e$var$fieldRows","querySelectorAll","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$gameBest","$09e991522ca7e64e$var$messages","$09e991522ca7e64e$var$bestScore","getItem","$09e991522ca7e64e$var$updateAll","addEventListener","evt","key","contains","replace"],"version":3,"file":"index.46f19d96.js.map"}